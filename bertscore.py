# -*- coding: utf-8 -*-
"""BERTScore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nyxi4EB4YsofXwjwufUMzVj0Hv2dpqmH
"""

# THIS IS A NON-GPU CODE
# IMPORTING THE LIBRARIES
import os
os.system('pip install bert-embedding')
os.system('pip install -r requirements_bertscore.txt')
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from bert_embedding import BertEmbedding
bert_embedding = BertEmbedding(model='bert_24_1024_16', dataset_name='book_corpus_wiki_en_cased')

def get_embedding_matrix(ref_sent,cand_sent):
  ref_array=np.ones((len(ref_sent),1024))
  cand_array=np.ones((len(cand_sent),1024))
  for index,ref in enumerate(ref_sent):
    b=np.array(ref[1])
    if b.shape[0] != 1:
      b=(np.sum(np.array(ref[1]),axis=0))/(np.array(ref[1])).shape[0]
    ref_array[index,:]=np.array(b)
  for index,cand in enumerate(cand_sent):
    b=np.array(cand[1])
    if b.shape[0] != 1:
      b=(np.sum(np.array(cand[1]),axis=0))/(np.array(cand[1])).shape[0]
    cand_array[index,:]=np.array(b)
  return ref_array,cand_array

def get_weights(l):
  print('Enter the weights for the candidate sentence, or press q to ignore weighing (gives equal weight to all)')
  resp=input()
  if (resp=='q'):
    weights=np.ones((1,l))
    return weights
  else :
    weights=(list(map(float,resp.split(' '))))
    assert len(weights)==l , "Please enter the required number of weights"
    return np.array(weights)

def cos_similarity(ref_array,cand_array):
  result=cosine_similarity(cand_array,Y=ref_array)
  return result


def fscore(ref_array,cand_array):
  res_array = ref_array.dot(cand_array.transpose)
  pres = np.max(res_array, axis = 0) / (np.linalg.norm(ref_array)) 
  re = np.array(res_array,axis = 1) / (np.linalg.norm(cand_array))
  f_score = ( 2 * pres * re)/(pres+ re)
  return f_score 
  


def final_score(result,weights):
  final_score=np.sum(np.multiply(result,weights))/(np.sum(weights))
  return final_score

if __name__=="__main__":
  # INPUTTING THE SENTENCES AND GETTING THE SENTENCE EMBEDDINGS
  ref_sent_list = list(input("Enter the Refrence Stenences. Different Senences must be separated by a period sign ").split('.'))
  cand_sent_list = list(input("Enter the Candidate Stenences. Different Senences must be separated by a period sign ").split('.'))
  assert len(ref_sent_list)==len(cand_sent_list) , "Number of refrence and candidate sentences should be equal"
  for i in range(0,len(ref_sent_list)-1):
    ref_sent=((ref_sent_list[i]).strip()).split(' ')
    cand_sent=((cand_sent_list[i]).strip()).split(' ')
    # GETTING THE EMBEDDINGS IN A MATRIX
    ref_array,cand_array = get_embedding_matrix(bert_embedding(ref_sent),bert_embedding(cand_sent)) 
    # GETTING THE PAIR-WISE COSINE SIMILARITY
    result = cos_similarity(ref_array,cand_array)
    # APPLY MAX-POOLING ON THE RESULT
    result=(np.max(result,axis=1))
    # TAKING WEIGHTS INPUT
    weights=get_weights(len(cand_sent))  
    #CALCULATING FINAL SCORE
    cos_score = final_score(result,weights)
    f_score = fscore(ref_array,cand_array)
    print("The BERTScore for the first sentence is : {}".format(f_score))

